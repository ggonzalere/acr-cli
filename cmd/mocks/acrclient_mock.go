// Code generated by MockGen. DO NOT EDIT.
// Source: cmd\api\acrclient_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	acr "github.com/Azure/acr-cli/acr"
	gomock "github.com/golang/mock/gomock"
)

// MockACRClient is a mock of ACRClient interface
type MockACRClient struct {
	ctrl     *gomock.Controller
	recorder *MockACRClientMockRecorder
}

// MockACRClientMockRecorder is the mock recorder for MockACRClient
type MockACRClientMockRecorder struct {
	mock *MockACRClient
}

// NewMockACRClient creates a new mock instance
func NewMockACRClient(ctrl *gomock.Controller) *MockACRClient {
	mock := &MockACRClient{ctrl: ctrl}
	mock.recorder = &MockACRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockACRClient) EXPECT() *MockACRClientMockRecorder {
	return m.recorder
}

// AcrListTags mocks base method
func (m *MockACRClient) AcrListTags(ctx context.Context, loginURL, auth, repoName, orderBy, last string) (*acr.TagAttributeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcrListTags", ctx, loginURL, auth, repoName, orderBy, last)
	ret0, _ := ret[0].(*acr.TagAttributeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcrListTags indicates an expected call of AcrListTags
func (mr *MockACRClientMockRecorder) AcrListTags(ctx, loginURL, auth, repoName, orderBy, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcrListTags", reflect.TypeOf((*MockACRClient)(nil).AcrListTags), ctx, loginURL, auth, repoName, orderBy, last)
}

// AcrDeleteTag mocks base method
func (m *MockACRClient) AcrDeleteTag(ctx context.Context, loginURL, auth, repoName, reference string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcrDeleteTag", ctx, loginURL, auth, repoName, reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcrDeleteTag indicates an expected call of AcrDeleteTag
func (mr *MockACRClientMockRecorder) AcrDeleteTag(ctx, loginURL, auth, repoName, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcrDeleteTag", reflect.TypeOf((*MockACRClient)(nil).AcrDeleteTag), ctx, loginURL, auth, repoName, reference)
}

// AcrListManifests mocks base method
func (m *MockACRClient) AcrListManifests(ctx context.Context, loginURL, auth, repoName, orderBy, last string) (*acr.ManifestAttributeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcrListManifests", ctx, loginURL, auth, repoName, orderBy, last)
	ret0, _ := ret[0].(*acr.ManifestAttributeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcrListManifests indicates an expected call of AcrListManifests
func (mr *MockACRClientMockRecorder) AcrListManifests(ctx, loginURL, auth, repoName, orderBy, last interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcrListManifests", reflect.TypeOf((*MockACRClient)(nil).AcrListManifests), ctx, loginURL, auth, repoName, orderBy, last)
}

// DeleteManifest mocks base method
func (m *MockACRClient) DeleteManifest(ctx context.Context, loginURL, auth, repoName, reference string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManifest", ctx, loginURL, auth, repoName, reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManifest indicates an expected call of DeleteManifest
func (mr *MockACRClientMockRecorder) DeleteManifest(ctx, loginURL, auth, repoName, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManifest", reflect.TypeOf((*MockACRClient)(nil).DeleteManifest), ctx, loginURL, auth, repoName, reference)
}
